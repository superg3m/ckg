# -------------------------------- GENERATED BY C_BUILD --------------------------------
import os
import sys
def FIND_C_BUILD(current_dir):
    if os.path.isdir(os.path.join(current_dir, "c_build")):
        sys.path.insert(0, current_dir)
        return

    parent_dir = os.path.dirname(current_dir)
    if parent_dir != current_dir:
        FIND_C_BUILD(parent_dir)

FIND_C_BUILD(os.path.abspath(os.path.dirname(__file__)))
from c_build.source.UserUtilities import *
from c_build.source.Manager import *
# --------------------------------------------------------------------------------------s

pc: ProjectConfig = ProjectConfig(
    project_name = "ckg",
    project_debug_with_visual_studio = False,
    project_rebuild_project_dependencies = False,
    project_executable_names  = ["test_ckg.exe"]
)

cc: CompilerConfig = CompilerConfig(
    compiler_name = C_BUILD_COMPILER_NAME() if C_BUILD_IS_DEPENDENCY() else "INVALID_COMPILER",
)

if IS_WINDOWS() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "cl"
elif IS_DARWIN() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "clang"
elif IS_LINUX() and not C_BUILD_IS_DEPENDENCY():
    cc.compiler_name = "gcc"

# Do different things depending on the platform
compiler_inject = []
if cc.compiler_name == "cl":
    cc.compiler_warning_level = "all"
    cc.compiler_disable_specific_warnings = [
        "4820", 
        "4996", 
        "4255",
        "5045",
        "4464",
        "4711",
        "4710"
    ]
else:
    cc.compiler_warning_level = "all"
    compiler_inject = ["-Wextra"]
    cc.compiler_disable_specific_warnings = [
        "implicit-fallthrough"
    ]

executable_procedure_libs = []
if IS_WINDOWS():
    windows_libs = [GET_LIB_FLAG(cc, "User32"), GET_LIB_FLAG(cc, "Gdi32")]
    executable_procedure_libs += windows_libs

build_postfix = f"build_{cc.compiler_name}/{C_BUILD_BUILD_TYPE()}"
procedures: Dict[str, ProcedureConfig] = {
    "ckg_lib": ProcedureConfig(
        build_directory = f"./{build_postfix}",
        output_name = GET_LIB_NAME(cc, 'ckg'),
        source_files = ["../../ckg.c"],
        compiler_inject_into_args=compiler_inject
    ),

    "test_ckg": ProcedureConfig(
        build_directory = f"./example/{build_postfix}",
        output_name = "test_ckg.exe",
        source_files = ["../../*.c"],
        additional_libs = [f"../../../{build_postfix}/{GET_LIB_NAME(cc, 'ckg')}"],
        compiler_inject_into_args=compiler_inject
    ),
}

manager: Manager = Manager(cc, pc, procedures)
manager.build_project()