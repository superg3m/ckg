# -------------------------------- GENERATED BY C_BUILD --------------------------------
from c_build.source.Utilities import *
from c_build.source.Manager import *
# --------------------------------------------------------------------------------------

compiler_name = C_BUILD_COMPILER_NAME() if C_BUILD_IS_DEPENDENCY() else "cl"

if not IS_WINDOWS():
    compiler_name = "gcc" 

compiler_warning_level = ""
compiler_disable_specific_warnings = []
compiler_treat_warnings_as_errors = True
compiler_disable_warnings = False

project_name = "ckg"
project_dependencies = [""]
project_executable_procedures = ["test_ckg.exe"]
project_rebuild_project_dependencies = False
project_debug_with_visual_studio = False

# Do different things depending on the platform
if compiler_name == "cl":
	compiler_warning_level = "4"
	compiler_disable_specific_warnings = ["5105", "4668", "4820", "4996"]
elif compiler_name in ["gcc", "cc", "clang"]:
	compiler_warning_level = "all"
	compiler_disable_specific_warnings = ["deprecated-declarations"]

build_suffix = f"build_{compiler_name}"
procedures_config = {
    "ckg_lib": {
        "build_directory": f"./build_{compiler_name}",
        "output_name": C_BUILD_LIB('ckg', compiler_name),
        "source_files": ["../ckg.c"],
        "additional_libs": [],
        "compile_time_defines": [],
        "include_paths": [],
    },
	"test_ckg": {
        "build_directory": f"./example/{compiler_name}",
        "output_name": "test_ckg.exe",
        "source_files": ["../*.c"],
        "additional_libs": [f"../../build_{compiler_name}/{C_BUILD_LIB('ckg', compiler_name)}"],
        "compile_time_defines": [],
        "include_paths": [],
    },
}

compiler_config = {key: value for key, value in locals().items() if key.startswith('compiler_')}
project_config = {key: value for key, value in locals().items() if key.startswith('project_')}

manager: Manager = Manager(compiler_config, project_config, procedures_config)
manager.build_project()
# -------------------------------------------------------------------------------------
